parameters:
- name: stages
  type: object
  default: []

stages:
- ${{ each stage in parameters.stages }}:
  - stage: '${{ stage.name }}'
    displayName: '${{ stage.name }} Deployment'
    variables:
      - group: SEC_MS
      - name: apiops_release_version
        value: "v5.1.4"
      - name: API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH
        value: 'APIMConfig'
      - name: RESOURCE_GROUP_NAME
        value: 'z-rg-ingress-dev'
      - name: API_MANAGEMENT_SERVICE_NAME
        value: 'apim-custpm-onfghs'
      - name: APIM_LOGGER_NAME
        value: "appinsights-logger"
      - name: CONFIGURATION_YAML_PATH
        value: './APIMConfig/environments/configuration.${{ stage.environmentCode }}.yaml'

    jobs:
    - job: BuildAndPublish
      displayName: 'Build and Publish'
      pool:
        name: Default
      steps:

        - task: DownloadPipelineArtifact@2
          inputs:
            buildType: 'specific'
            project: '$(System.TeamProject)'
            pipeline: 'Build app chat'
            runVersion: 'latest'
            artifact: 'chat-artifacts'
            path: '$(Build.ArtifactStagingDirectory)/chat-artifacts'

        - task: PowerShell@2
          displayName: Set publishing variables
          inputs:
            targetType: inline
            script: |
              Set-StrictMode -Version Latest
              $ErrorActionPreference = "Stop"
              $VerbosePreference = "Continue"
              $InformationPreference = "Continue"

              az login --service-principal `
                --username "$env:SP_USERNAME" `
                --password "$env:SP_PASSWORD" `
                --tenant "$env:TENANT_ID"

              $azureAccessToken = az account get-access-token --query "accessToken" --output tsv
              Write-Host "##vso[task.setvariable issecret=true;variable=AZURE_BEARER_TOKEN]$azureAccessToken"
              Write-Host "##vso[task.setvariable issecret=true;variable=AZURE_CLIENT_ID]$env:SP_USERNAME"
              Write-Host "##vso[task.setvariable issecret=true;variable=AZURE_CLIENT_SECRET]$env:SP_PASSWORD"
              Write-Host "##vso[task.setvariable issecret=true;variable=AZURE_TENANT_ID]$env:TENANT_ID"
          env:
            SP_USERNAME: $(ARMCLIENTID)
            SP_PASSWORD: $(ARMCLIENTSECRET)
            TENANT_ID: $(ARMTENANTID)

        - task: PowerShell@2
          displayName: Get Aks Context and publish app
          inputs:
            targetType: "inline"
            workingDirectory: releases/chat
            script: |
              $resourceGroup = "${{ stage.AKSRG }}"
              $clusterName = "${{ stage.AKS }}"
              $version = "$(Build.BuildNumber)"

              Write-Host "Getting AKS credentials for cluster '$clusterName' in resource group '$resourceGroup'..."
              az aks get-credentials --resource-group $resourceGroup --name $clusterName --overwrite-existing

              $umiId = az identity show --name "umi-chat" --resource-group "z-rg-apps-dev" --query clientId -o tsv

              $imagePath = "$(Build.ArtifactStagingDirectory)/chat-artifacts/image"
              $image = Get-Content -Path $imagePath -Raw

              helm upgrade --install chat ./HELM `
                -f ./HELM/values.yaml `
                --set appVersion="$version" `
                --set version="$version" `
                --set umiClientId="$umiId" `
                --set image.repository="$image" `
                --set config.clientUrl="https://frontend.local"

        - task: PowerShell@2
          displayName: "Wait for Service External IP"
          inputs:
            targetType: inline
            workingDirectory: releases/chat
            script: |
              $serviceName = "chat"
              $namespace = "chat"
              $timeoutMinutes = 5
              $intervalSeconds = 10
              $elapsed = 0
              $externalIp = ""

              Write-Host "Waiting for external IP of service '$serviceName' in namespace '$namespace'..."

              while ($elapsed -lt ($timeoutMinutes * 60)) {
                  $externalIp = kubectl get svc $serviceName -n $namespace -o jsonpath="{.status.loadBalancer.ingress[0].ip}"
                  if (![string]::IsNullOrEmpty($externalIp)) {
                      Write-Host "External IP acquired: $externalIp"
                      break
                  }
                  Start-Sleep -Seconds $intervalSeconds
                  $elapsed += $intervalSeconds
                  Write-Host "Still waiting... elapsed: $elapsed seconds"
              }

              if ([string]::IsNullOrEmpty($externalIp)) {
                  Write-Error "Timeout waiting for external IP."
                  exit 1
              }

              # Set pipeline variable
              Write-Host "##vso[task.setvariable variable=ECHO_SERVICE_IP;isOutput=true]$externalIp"

              (Get-Content -Path "./APIMConfig/environments/configuration.${{ stage.environmentCode }}.yaml") -replace "SERVICE_IP", "$externalIp" | Set-Content -Path "APIMConfig/environments/configuration.${{ stage.environmentCode }}.yaml"
              type APIMConfig/environments/configuration.${{ stage.environmentCode }}.yaml
              
        - task: PowerShell@2
          displayName: Fetch publisher
          inputs:
            targetType: "inline"
            workingDirectory: releases/chat
            script: |
              # Debug: Print variables
              Write-Host "APIOps Release Version: $(apiops_release_version)"
              Write-Host "Operating System: $(Agent.OS)"
              
              Set-StrictMode -Version Latest
              $ErrorActionPreference = "Stop"
              $VerbosePreference = "Continue"
              $InformationPreference = "Continue"

              Write-Information "Downloading publisher..."
              $publisherFileName = "$(Agent.OS)" -like "*win*" ? "publisher.win-x64.exe" : "publisher.linux-x64"
              $uri = "https://github.com/Azure/apiops/releases/download/$(apiops_release_version)/$publisherFileName"
              Write-Host "Constructed Download URI: $uri"
              $destinationFilePath = Join-Path "$(Agent.TempDirectory)" "publisher.exe"
              Invoke-WebRequest -Uri "$uri" -OutFile "$destinationFilePath"

              if ("$(Agent.OS)" -like "*linux*")
              {
                Write-Information "Setting file permissions..."
                & chmod +x "$destinationFilePath"
                if ($LASTEXITCODE -ne 0) { throw "Setting file permissions failed."}
              }
              Write-Host "PublisherFileName: $publisherFileName"
              Write-Host "DestinationFile: $destinationFilePath"
              Write-Host "##vso[task.setvariable variable=PUBLISHER_FILE_PATH]$destinationFilePath"
              Write-Information "Execution complete."
            failOnStderr: true
            pwsh: true

        - task: PowerShell@2
          displayName: Run publisher for ${{ stage.environmentCode}} environment
          inputs:
            targetType: "inline"
            workingDirectory: releases/chat
            script: |
              dir
              ls
              type APIMConfig/environments/configuration.${{ stage.environmentCode }}.yaml
              Set-StrictMode -Version Latest
              $ErrorActionPreference = "Stop"
              $VerbosePreference = "Continue"
              $InformationPreference = "Continue"

              & "$(PUBLISHER_FILE_PATH)"                
              if ($LASTEXITCODE -ne 0) { throw "Running publisher failed."}

              Write-Information "Execution complete."
            failOnStderr: true
            pwsh: true
          env:
            AZURE_BEARER_TOKEN: $(AZURE_BEARER_TOKEN)
            AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
            AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
            AZURE_TENANT_ID: $(AZURE_TENANT_ID)
            AZURE_SUBSCRIPTION_ID: ${{ stage.subscriptionId }}
            AZURE_RESOURCE_GROUP_NAME: ${{ variables.RESOURCE_GROUP_NAME }}
            API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH: ${{ variables.API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH }}
            API_MANAGEMENT_SERVICE_NAME: ${{ variables.API_MANAGEMENT_SERVICE_NAME }}
            CONFIGURATION_YAML_PATH: ${{ variables.CONFIGURATION_YAML_PATH }}
