parameters:
- name: stages
  type: object
  default: []
- name: apimResourceGroupName
  type: string
- name: apiManagementServiceName
  type: string
- name: apimLogger
  type: string
- name: api
  type: string
  

stages:
- ${{ each stage in parameters.stages }}:
  - stage: '${{ stage.name }}'
    displayName: '${{ stage.name }} Deployment'
    variables:
      apiops_release_version: "v5.1.4"
      CONFIGURATION_YAML_PATH: '$(System.DefaultWorkingDirectory)/APIMConfig/${{ parameters.api }}/environments/configuration.${{ stage.environmentCode }}.yaml'
      API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH: '$(System.DefaultWorkingDirectory)/APIMConfig/${{ parameters.api }}'
      RESOURCE_GROUP_NAME : '${{ parameters.apimResourceGroupName }}-${{ stage.environmentCode }}'
      API_MANAGEMENT_SERVICE_NAME : '${{ parameters.apiManagementServiceName }}-${{ stage.environmentCode }}'
      ${{ if eq(parameters.apimLogger, 'we-ir-ai-int01') }}:
        APIM_LOGGER_NAME: '${{ parameters.apimLogger }}-${{ stage.environmentCode }}'

    jobs:
    - job: BuildAndPublish
      displayName: 'Build and Publish'
      pool:
        vmImage: 'windows-latest'
      steps:

        - task: PowerShell@2
          displayName: Set specification
          inputs:
            targetType: inline
            workingDirectory: releases/mock-response
            script: |
              Write-Host "Subscription ID: ${{ stage.subscriptionId }}"
              (Get-Content -Path "./APIMConfig/${{ parameters.api }}/environments/configuration.${{ stage.environmentCode }}.yaml") -replace "/subscriptions/SUBSCRIPTION_ID/resourceGroups/RESOURCE_GROUP_NAME/providers/Microsoft.ApiManagement/service/APIM_NAME/loggers/APIM_LOGGER_NAME", "/subscriptions/${{ stage.subscriptionId }}/resourceGroups/${{ variables.RESOURCE_GROUP_NAME }}/providers/Microsoft.ApiManagement/service/${{ variables.API_MANAGEMENT_SERVICE_NAME }}/loggers/${{ variables.APIM_LOGGER_NAME }}" | Set-Content -Path "APIMConfig/${{ parameters.api }}/environments/configuration.${{ stage.environmentCode }}.yaml"
              type APIMConfig/${{ parameters.api }}/environments/configuration.${{ stage.environmentCode }}.yaml

        # - task: AzureCLI@2
        #   displayName: Set publishing variables
        #   inputs:
        #     azureSubscription: ${{ stage.servicePrincipal }}
        #     scriptType: pscore
        #     scriptLocation: inlineScript
        #     inlineScript: |
        #       Set-StrictMode -Version Latest
        #       $ErrorActionPreference = "Stop"
        #       $VerbosePreference = "Continue"
        #       $InformationPreference = "Continue"
        #       $azureAccessToken = az account get-access-token --query "accessToken" --output tsv
        #       Write-Host "##vso[task.setvariable issecret=true;variable=AZURE_BEARER_TOKEN]$azureAccessToken"
        #       Write-Host "Bearer token retrieved and set."

        #       $azureClientId = $env:servicePrincipalId
        #       Write-Host "##vso[task.setvariable issecret=true;variable=AZURE_CLIENT_ID]$azureClientId"
        #       Write-Host "Client ID retrieved and set."

        #       $azureClientSecret = $env:servicePrincipalKey
        #       Write-Host "##vso[task.setvariable issecret=true;variable=AZURE_CLIENT_SECRET]$azureClientSecret"
        #       Write-Host "Client secret retrieved and set."

        #       $azureTenantId = $env:tenantId
        #       Write-Host "##vso[task.setvariable issecret=true;variable=AZURE_TENANT_ID]$azureTenantId"
        #       Write-Host "Tenant ID retrieved and set."
        #     addSpnToEnvironment: true
        #     failOnStandardError: true

        # # replacetokens@3 task will need to be installed to use
        # - ${{ if ne(variables.CONFIGURATION_YAML_PATH, '') }}:
        #     - task: qetza.replacetokens.replacetokens-task.replacetokens@3
        #       displayName: "Perform namevalue secret substitution in ${{ variables.CONFIGURATION_YAML_PATH }}"
        #       inputs:
        #         targetFiles: ${{ variables.CONFIGURATION_YAML_PATH }}
        #         encoding: "auto"
        #         writeBOM: true
        #         verbosity: "off"
        #         actionOnMissing: "warn"
        #         keepToken: false
        #         tokenPrefix: "{#"
        #         tokenSuffix: "#}"

        # - task: PowerShell@2
        #   displayName: Fetch publisher
        #   inputs:
        #     targetType: "inline"
        #     script: |
        #       # Debug: Print variables
        #       Write-Host "APIOps Release Version: $(apiops_release_version)"
        #       Write-Host "Operating System: $(Agent.OS)"
              
        #       Set-StrictMode -Version Latest
        #       $ErrorActionPreference = "Stop"
        #       $VerbosePreference = "Continue"
        #       $InformationPreference = "Continue"

        #       Write-Information "Downloading publisher..."
        #       $publisherFileName = "$(Agent.OS)" -like "*win*" ? "publisher.win-x64.exe" : "publisher.linux-x64"
        #       $uri = "https://github.com/Azure/apiops/releases/download/$(apiops_release_version)/$publisherFileName"
        #       Write-Host "Constructed Download URI: $uri"
        #       $destinationFilePath = Join-Path "$(Agent.TempDirectory)" "publisher.exe"
        #       Invoke-WebRequest -Uri "$uri" -OutFile "$destinationFilePath"

        #       if ("$(Agent.OS)" -like "*linux*")
        #       {
        #         Write-Information "Setting file permissions..."
        #         & chmod +x "$destinationFilePath"
        #         if ($LASTEXITCODE -ne 0) { throw "Setting file permissions failed."}
        #       }
        #       Write-Host "PublisherFileName: $publisherFileName"
        #       Write-Host "DestinationFile: $destinationFilePath"
        #       Write-Host "##vso[task.setvariable variable=PUBLISHER_FILE_PATH]$destinationFilePath"
        #       Write-Information "Execution complete."
        #     failOnStderr: true
        #     pwsh: true

        # - task: PowerShell@2
        #   displayName: Run publisher for ${{ stage.environmentCode}} environment
        #   inputs:
        #     targetType: "inline"
        #     script: |

        #       Set-StrictMode -Version Latest
        #       $ErrorActionPreference = "Stop"
        #       $VerbosePreference = "Continue"
        #       $InformationPreference = "Continue"

        #       & "$(PUBLISHER_FILE_PATH)"                
        #       if ($LASTEXITCODE -ne 0) { throw "Running publisher failed."}

        #       Write-Information "Execution complete."
        #     failOnStderr: true
        #     pwsh: true
        #   env:
        #     AZURE_BEARER_TOKEN: $(AZURE_BEARER_TOKEN)
        #     AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
        #     AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
        #     AZURE_TENANT_ID: $(AZURE_TENANT_ID)
        #     AZURE_SUBSCRIPTION_ID: ${{ stage.subscriptionId }}
        #     AZURE_RESOURCE_GROUP_NAME: ${{ variables.RESOURCE_GROUP_NAME }}
        #     API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH: ${{ variables.API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH }}
        #     API_MANAGEMENT_SERVICE_NAME: ${{ variables.API_MANAGEMENT_SERVICE_NAME }}
        #     ${{ if ne( variables['CONFIGURATION_YAML_PATH'], '' ) }}:
        #       CONFIGURATION_YAML_PATH: ${{ variables.CONFIGURATION_YAML_PATH }}
